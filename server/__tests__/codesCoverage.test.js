const { parsePageContent } = require('../parsePageContent');

describe('codes.txt coverage in raw.txt and parsePageContent', () => {
  test('все коды, которые присутствуют в raw.txt, спарсены parsePageContent', () => {
    const codes = ['1110', '1120', '1130', '1140', '1150', '11501', '11502', '1160', '1170', '11701', '1180', '1190', '1100', '1210', '12101', '12102', '12103', '1220', '12201', '12202', '1230', '12301', '12302', '12303', '12304', '12305', '12306', '1240', '12401', '1250', '12501', '12502', '1260', '12601', '1200', '1600', '1310', '1320', '1340', '1350', '1360', '1370', '1300', '1410', '1420', '1430', '1450', '1400', '1510', '15101', '1520', '15201', '15202', '15203', '15204', '15205', '15206', '15207', '1530', '1540', '1550', '1500', '1700'];
    const rawStrings = ['����� 0710001 �.2', '���������', '���', '�� 30 ��������', '������������ ����������', '�� 31 �������', '�� 31 �������', '2024�.', '2023 �.', '2022r.', '������', 'III. ������� � �������', '�������� ������� (���������� �������,', '1310', '�������� ����, ������ ���������)', '210', '210', '210', '����������� �����, ����������� �', '1320', '����������', '���������� ������������ �������', '-', '-', '1340', '-', '���������� �������(��� ����������)', '-', '-', '1350', '372100', '372 100', '372100', '��������� �������', '1360', '-', '-', '���������������� �������(����������', '-', '������)', '1370', '39 645', '32628', '28623', '����� �� ������� II', '1300', '411 955', '404938', '400933', 'IV. ������������ �������������', '������� ��������', '1410', '���������� ��������� �������������', '-', '-', '1420', '-', '-', '��������� �������������', '1430', '-', '������ �������������', '-', '1450', '����� �� ������� IV', '-', '-', '1400', '-', 'V. ������������� �������������', '������� ��������', '1510', '20 000', '943', '� ��� �����:', '-', '������������� �����', '15101', '20 000', '943', '-', '������������ �������������', '1520', '3 557538', '2635 071', '2411 555', '� ��� �����:', '������� � ������������ � ������������', '15201', '1575 741', '1401 885', '1 139 830', '������� � ������������ � �����������', '15202', '1812979', '1 079 184', '1 123 885', '������� �� ������� � ������', '15203', '6990', '5272', '1202', '������� �� ����������� ����������� �', '15204', '�����������', '526', '387', '382', '������� � ���������� �� ������ �����', '15205', '1482', '81', '1158', '������� � ������������ ������', '15206', '-', '-', '314', '������� � ������� ���������� �', '15207', '�����������', '159 820', '148 262', '144784', '������ ������� ��������', '1530', '-', '-', '��������� �������������', '-', '1540', '-', '-', '������ �������������', '1550', '-', '-', '����� �� ������� V', '1500', '3557 538', '2655 071', '2412498', '5�AHC', '1700', '3 969 493', '3 060 009', '2813431', 'F', '���H', '������������', '������� �������', '(�������)', '����������', '(����������� �������)'];

    const codesFoundInRaw = codes.filter(code => rawStrings.includes(code));
    console.log('Коды, найденные в rawStrings:', codesFoundInRaw);
    expect(codesFoundInRaw.length).toBeGreaterThan(0);

    const pageContents = [rawStrings];
    const { otchetnost, error } = parsePageContent(pageContents);
    console.log('Результат parsePageContent:', { error, otchetnostLength: otchetnost?.length });
    if (otchetnost && otchetnost.length > 0) {
      console.log('Первые 5 элементов otchetnost:', otchetnost.slice(0, 5));
    }
    
    expect(error).toBeUndefined();
    expect(Array.isArray(otchetnost)).toBe(true);

    const parsedCodes = new Set(otchetnost.map(r => r.code));
    const missingParsed = codesFoundInRaw.filter(code => !parsedCodes.has(code));

    if (missingParsed.length > 0) {
      console.error('Коды, найденные в raw.txt, но не спарсенные:', missingParsed);
    }

    expect(missingParsed).toEqual([]);
  });
});


