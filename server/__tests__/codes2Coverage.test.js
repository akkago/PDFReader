const { parsePageContent } = require('../parsePageContent');

describe('codes2.txt coverage in raw2.txt and parsePageContent', () => {
  test('все коды, которые присутствуют в raw2.txt, спарсены parsePageContent', () => {
    const codes = ['2110', '2120', '2100', '2210', '2220', '2200', '2310', '2320', '2330', '2340', '23401', '23402', '23403', '23404', '23405', '23406', '2350', '23501', '23502', '23503', '23504', '23505', '23506', '23507', '23508', '23509', '2300', '2410', '2411', '2412', '2460', '2400', '2510', '2520', '2530', '2500', '2900', '2910'];
    const rawStrings = [
      ['', 'за Январь - Сентябрь 2024 г.', 'Коды', 'Форма по ОКУД', '0710002', 'Дата (число, месяц, год)', '30', '09', '2024', 'Организация', 'Акционерное общество "ПРОммОНТАЖСТРОЙ"', 'по ОКПО', '57932545', 'Идентификационный номер налогоплательщика', 'ИHH', '7805235431', 'Вид экономической', 'Работы строительные специализированные, не включенные в', 'по', '43.99.5', 'деятельности', 'другие группировки', 'оКвэд 2', 'Организационно-правовая форма /форма собственности', 'Непубличные акционерные', '12267', '16', 'общества', '/Частная собственность', 'по ОКОПФ / ОКФС', 'Единица измерения:', 'в тыс. рублей', 'по ОКЕИ', '384', 'Пояснения', 'За Январь -', 'За Январь -', 'Наименование показателя', 'Код', 'Сентябрь 2024 г.', 'Сентябрь 2023 г.', 'Выручка', '2110', '1327 023', '1 309 986', 'Себестоимость продаж', '2120', '(1 196 001)', '(1 211618)', 'Валовая прибыль (убыток)', '2100', '131 022', '98368', 'Коммерческиерасходы', '2210', '-', 'Управленческие расходы', '2220', '(37134)', '(29 287)', 'Прибыль (убыток) от продаж', '2200', '93 888', '69 081', 'Доходы от участия в других организациях', '2310', '-', 'Проценты к получению', '2320', '-', 'Проценты к уплате', '2330', '-', 'Прочие доходы', '2340', '20291', '28873', 'в том числе:', 'Доходы, связанные с реализацией основных', '23401', 'средств', '283', '3782', 'Доходы по операциям с финансовыми', 'инструментами срочных сделок,не', '23402', ' к', '-', 'Прочие операционные доходы', '23403', '-', '169', 'Штрафы, пени, неустойки к получению', '23404', '455', '190', 'Доходы в виде списанной кредиторской', '23405', 'задолженности', '19 553', '24732', 'Прочие внереализационные доходы', '23406', '-', 'Прочие расходы', '2350', '(105 055)', '(95 002)', 'в том числе:', 'Расходы, связанные с реализацией основных', '23501', 'средств', '(2)', '(182)', 'Расходы по операциям с финансовыми', 'инструментами срочных сделок, не', '23502', '  ', '-', 'F', 'Расходы на услуги банков', '23503', '(947)', '(8 303)', 'Прочие операционные расходы', '23504', '(63 037)', '(68 242)', 'Штрафы, пени, неустойки к уплате', '23505', '(4171)', '(229)', 'Налоги и сборы', '23506', '(20828)', '(69)', 'Расходы в виде списанной дебиторской', '23507', 'задолженности', '(5010)', '(16 786)', 'Прочие внереализационные расходы', '23508', '(11 060)', '(1191)', 'Прочие косвенные расходы', '23509', '-', 'Прибыль (убыток) до налогообложения', '2300', '9 124', '2952', 'Налог на прибыль', '2410', '(2 106)', '(678)', 'в том числе:', 'текущий налог на прибыль', '2411', '(2 106)', '(678)', 'отложенный налог на прибыль', '2412', '-', '-', 'Прочее', '2460', '-', 'Чистая прибыль (убыток)', '2400', '7018', '2274'],
      ['Форма 0710002 с.2', 'Пояснения', 'Наименование показателя', 'Код', 'За Январь -', 'За Январь -', 'Сентябрь 2024 г.', 'Сентябрь 2023 г.', 'Результат от переоценки внеоборотных активов, не', 'включаемый в чистую прибыль (убыток) периода', '2510', 'Результат от прочих операций, не включаемый', 'в чистую прибыль (убыток) периода', '2520', 'Налог на прибыль от операций, результат которых', '-', 'не включается в чистую прибыль (убыток) периода', '2530', 'Совокупный финансовый результат периода', '2500', '-', '7018', '2274', 'Справочно', '2900', 'Базовая прибыль (убыток) на акцию', 'Разводненная прибыль (убыток) на акцию', '-', '2910', '-', '-', '-', '', '5431', '', 'Иванова Татьяна', 'Руководитель', 'Николаевна', '(подпись)', '(расшифровка подписи)', '30 октября 2024 г.']
    ];

    const allStrings = rawStrings.flat();
    const codesFoundInRaw = codes.filter(code => allStrings.includes(code));
    expect(codesFoundInRaw.length).toBeGreaterThan(0);

    const pageContents = rawStrings;
    const { otchetnost, error } = parsePageContent(pageContents);
    expect(error).toBeUndefined();
    expect(Array.isArray(otchetnost)).toBe(true);

    const parsedCodes = new Set(otchetnost.map(r => r.code));
    const missingParsed = codesFoundInRaw.filter(code => !parsedCodes.has(code));

    expect(missingParsed).toEqual([]);
  });
});
