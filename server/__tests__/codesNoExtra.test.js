const { parsePageContent } = require('../parsePageContent');

describe('no-extra coverage', () => {
  test('никакие коды из codes.txt, отсутствующие, не появляются в parsePageContent', () => {
    const codes = ['1110', '1120', '1130', '1140', '1150', '11501', '11502', '1160', '1170', '11701', '1180', '1190', '1100', '1210', '12101', '12102', '12103', '1220', '12201', '12202', '1230', '12301', '12302', '12303', '12304', '12305', '12306', '1240', '12401', '1250', '12501', '12502', '1260', '12601', '1200', '1600', '1310', '1320', '1340', '1350', '1360', '1370', '1300', '1410', '1420', '1430', '1450', '1400', '1510', '15101', '1520', '15201', '15202', '15203', '15204', '15205', '15206', '15207', '1530', '1540', '1550', '1500', '1700'];
    const rawStrings = ['Форма 0710001 с.2', 'Пояснения', 'Код', 'На 30 сентября', 'Наименование показателя', 'На 31 декабря', 'На 31 декабря', '2024г.', '2023 г.', '2022r.', 'ПАССИВ', 'III. КАПИТАЛ И РЕЗЕРВЫ', 'Уставный капитал (складочный капитал,', '1310', 'уставный фонд, вклады товарищей)', '210', '210', '210', 'Собственные акции, выкупленные у', '1320', 'акционеров', 'Переоценка внеоборотных активов', '-', '-', '1340', '-', 'Добавочный капитал(без переоценки)', '-', '-', '1350', '372100', '372 100', '372100', 'Резервный капитал', '1360', '-', '-', 'Нераспределенная прибыль(непокрытый', '-', 'убыток)', '1370', '39 645', '32628', '28623', 'Итого по разделу II', '1300', '411 955', '404938', '400933', 'IV. ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА', 'Заемные средства', '1410', 'Отложенные налоговые обязательства', '-', '-', '1420', '-', '-', 'Оценочные обязательства', '1430', '-', 'Прочие обязательства', '-', '1450', 'Итого по разделу IV', '-', '-', '1400', '-', 'V. КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА', 'Заемные средства', '1510', '20 000', '943', 'в том числе:', '-', 'Краткосрочные займы', '15101', '20 000', '943', '-', 'Кредиторская задолженность', '1520', '3 557538', '2635 071', '2411 555', 'в том числе:', 'Расчеты с поставщиками и подрядчиками', '15201', '1575 741', '1401 885', '1 139 830', 'Расчеты с покупателями и заказчиками', '15202', '1812979', '1 079 184', '1 123 885', 'Расчеты по налогам и сборам', '15203', '6990', '5272', '1202', 'Расчеты по социальному страхованию и', '15204', 'обеспечению', '526', '387', '382', 'Расчеты с персоналом по оплате труда', '15205', '1482', '81', '1158', 'Расчеты с подотчетными лицами', '15206', '-', '-', '314', 'Расчеты с разными дебиторами и', '15207', 'кредиторами', '159 820', '148 262', '144784', 'Доходы будущих периодов', '1530', '-', '-', 'Оценочные обязательства', '-', '1540', '-', '-', 'Прочие обязательства', '1550', '-', '-', 'Итого по разделу V', '1500', '3557 538', '2655 071', '2412498', '5АAHC', '1700', '3 969 493', '3 060 009', '2813431', 'F', 'ОГРH', 'Руководитель', 'Иванова Татьяна', '(подпись)', 'Николаевна', '(расшифровка подписи)'];

    const codesNotInRaw = codes.filter(code => !rawStrings.includes(code));
    expect(codesNotInRaw.length).toBeGreaterThan(0);

    const pageContents = [rawStrings];
    const { otchetnost, error } = parsePageContent(pageContents);
    expect(error).toBeUndefined();
    expect(Array.isArray(otchetnost)).toBe(true);

    const parsedCodes = new Set(otchetnost.map(r => r.code));
    const extraParsed = codesNotInRaw.filter(code => parsedCodes.has(code));

    if (extraParsed.length > 0) {
      console.error('Коды, отсутствующие , но спарсенные:', extraParsed);
    }

    expect(extraParsed).toEqual([]);
  });
});


