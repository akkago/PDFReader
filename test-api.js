const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3000/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
async function testAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API...\n');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /parse –±–µ–∑ —Ñ–∞–π–ª–∞
    console.log('1. –¢–µ—Å—Ç /parse –±–µ–∑ —Ñ–∞–π–ª–∞:');
    try {
      const formData = new FormData();
      formData.append('type', 'otchetnost');
      
      await axios.post(`${API_BASE_URL}/parse`, formData, {
        headers: formData.getHeaders()
      });
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data);
      }
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /parse –±–µ–∑ —Ç–∏–ø–∞
    console.log('\n2. –¢–µ—Å—Ç /parse –±–µ–∑ —Ç–∏–ø–∞:');
    try {
      const formData = new FormData();
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
      const testFile = Buffer.from('test content');
      formData.append('file', testFile, { filename: 'test.pdf' });
      
      await axios.post(`${API_BASE_URL}/parse`, formData, {
        headers: formData.getHeaders()
      });
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: –¢–∏–ø —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data);
      }
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /parse —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ç–∏–ø–æ–º
    console.log('\n3. –¢–µ—Å—Ç /parse —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ç–∏–ø–æ–º:');
    try {
      const formData = new FormData();
      const testFile = Buffer.from('test content');
      formData.append('file', testFile, { filename: 'test.pdf' });
      formData.append('type', 'unsupported_type');
      
      await axios.post(`${API_BASE_URL}/parse`, formData, {
        headers: formData.getHeaders()
      });
    } catch (error) {
      if (error.response?.status === 400 && error.response?.data?.error === 'unsupported') {
        console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data);
      }
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /result —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
    console.log('\n4. –¢–µ—Å—Ç /result —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID:');
    try {
      await axios.get(`${API_BASE_URL}/result/non-existent-id`);
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data);
      }
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI();
